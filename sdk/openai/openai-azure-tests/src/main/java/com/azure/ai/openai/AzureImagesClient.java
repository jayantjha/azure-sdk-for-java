// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai;

import com.azure.ai.openai.implementation.AzureImagesImpl;
import com.azure.ai.openai.models.CreateImageRequest;
import com.azure.ai.openai.models.ImagesResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AzureOpenAIClient type.
 */
@ServiceClient(builder = AzureOpenAIClientBuilder.class)
public final class AzureImagesClient {
    @Generated
    private final AzureImagesImpl serviceClient;

    /**
     * Initializes an instance of AzureImagesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureImagesClient(AzureImagesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The createImage operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     model: String(dall-e-2/dall-e-3) (Optional)
     *     n: Integer (Optional)
     *     quality: String(standard/hd) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     size: String(256x256/512x512/1024x1024/1792x1024/1024x1792) (Optional)
     *     style: String(vivid/natural) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             b64_json: byte[] (Optional)
     *             url: String (Optional)
     *             revised_prompt: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param deploymentId The deploymentId parameter.
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createImageWithResponse(String deploymentId, BinaryData image,
        RequestOptions requestOptions) {
        return this.serviceClient.createImageWithResponse(deploymentId, image, requestOptions);
    }

    /**
     * The createImage operation.
     * 
     * @param deploymentId The deploymentId parameter.
     * @param image The image parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImagesResponse createImage(String deploymentId, CreateImageRequest image) {
        // Generated convenience method for createImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createImageWithResponse(deploymentId, BinaryData.fromObject(image), requestOptions).getValue()
            .toObject(ImagesResponse.class);
    }
}
