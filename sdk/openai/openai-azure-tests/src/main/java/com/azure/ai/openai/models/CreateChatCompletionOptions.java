// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import java.util.List;
import java.util.Map;

/**
 * Options for createChatCompletion API.
 */
@Fluent
public final class CreateChatCompletionOptions {
    /*
     * The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     */
    @Generated
    private List<AzureChatDataSource> dataSources;

    /*
     * A list of messages comprising the conversation so far. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     */
    @Generated
    private final List<ChatCompletionRequestMessage> messages;

    /*
     * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table
     * for details on which models work with the Chat API.
     */
    @Generated
    private final CreateChatCompletionRequestModel model;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so
     * far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     */
    @Generated
    private Double frequencyPenalty;

    /*
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @Generated
    private Map<String, Integer> logitBias;

    /*
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each
     * output token returned in the `content` of `message`.
     */
    @Generated
    private Boolean logprobs;

    /*
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each
     * with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     */
    @Generated
    private Integer topLogprobs;

    /*
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used
     * to control [costs](https://openai.com/api/pricing/) for text generated via API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     */
    @Generated
    private Integer maxTokens;

    /*
     * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens
     * and [reasoning tokens](/docs/guides/reasoning).
     */
    @Generated
    private Integer maxCompletionTokens;

    /*
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the
     * number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     */
    @Generated
    private Integer n;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     */
    @Generated
    private Double presencePenalty;

    /*
     * An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o),
     * [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo
     * models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     */
    @Generated
    private ChatResponseFormat responseFormat;

    /*
     * This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     */
    @Generated
    private Long seed;

    /*
     * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed
     * to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     */
    @Generated
    private CreateChatCompletionRequestServiceTier serviceTier;

    /*
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    @Generated
    private BinaryData stop;

    /*
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#
     * Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example
     * Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     */
    @Generated
    private Boolean stream;

    /*
     * The stream_options property.
     */
    @Generated
    private ChatCompletionStreamOptions streamOptions;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while
     * lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     */
    @Generated
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of
     * the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are
     * considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     */
    @Generated
    private Double topP;

    /*
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list
     * of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     */
    @Generated
    private List<ChatCompletionTool> tools;

    /*
     * The tool_choice property.
     */
    @Generated
    private BinaryData toolChoice;

    /*
     * The parallel_tool_calls property.
     */
    @Generated
    private Boolean parallelToolCalls;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn
     * more](/docs/guides/safety-best-practices/end-user-ids).
     */
    @Generated
    private String user;

    /*
     * Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     */
    @Generated
    private BinaryData functionCall;

    /*
     * Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     */
    @Generated
    private List<ChatCompletionFunctions> functions;

    /**
     * Creates an instance of CreateChatCompletionOptions class.
     * 
     * @param messages the messages value to set.
     * @param model the model value to set.
     */
    @Generated
    public CreateChatCompletionOptions(List<ChatCompletionRequestMessage> messages,
        CreateChatCompletionRequestModel model) {
        this.messages = messages;
        this.model = model;
    }

    /**
     * Get the dataSources property: The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     * 
     * @return the dataSources value.
     */
    @Generated
    public List<AzureChatDataSource> getDataSources() {
        return this.dataSources;
    }

    /**
     * Set the dataSources property: The data sources to use for the On Your Data feature, exclusive to Azure OpenAI.
     * 
     * @param dataSources the dataSources value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setDataSources(List<AzureChatDataSource> dataSources) {
        this.dataSources = dataSources;
        return this;
    }

    /**
     * Get the messages property: A list of messages comprising the conversation so far. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     * 
     * @return the messages value.
     */
    @Generated
    public List<ChatCompletionRequestMessage> getMessages() {
        return this.messages;
    }

    /**
     * Get the model property: ID of the model to use. See the [model endpoint
     * compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat
     * API.
     * 
     * @return the model value.
     */
    @Generated
    public CreateChatCompletionRequestModel getModel() {
        return this.model;
    }

    /**
     * Get the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @return the frequencyPenalty value.
     */
    @Generated
    public Double getFrequencyPenalty() {
        return this.frequencyPenalty;
    }

    /**
     * Set the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @param frequencyPenalty the frequencyPenalty value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setFrequencyPenalty(Double frequencyPenalty) {
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }

    /**
     * Get the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * @return the logitBias value.
     */
    @Generated
    public Map<String, Integer> getLogitBias() {
        return this.logitBias;
    }

    /**
     * Set the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The
     * exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of
     * selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * @param logitBias the logitBias value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setLogitBias(Map<String, Integer> logitBias) {
        this.logitBias = logitBias;
        return this;
    }

    /**
     * Get the logprobs property: Whether to return log probabilities of the output tokens or not. If true, returns the
     * log probabilities of each output token returned in the `content` of `message`.
     * 
     * @return the logprobs value.
     */
    @Generated
    public Boolean isLogprobs() {
        return this.logprobs;
    }

    /**
     * Set the logprobs property: Whether to return log probabilities of the output tokens or not. If true, returns the
     * log probabilities of each output token returned in the `content` of `message`.
     * 
     * @param logprobs the logprobs value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setLogprobs(Boolean logprobs) {
        this.logprobs = logprobs;
        return this;
    }

    /**
     * Get the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to return
     * at each token position, each with an associated log probability. `logprobs` must be set to `true` if this
     * parameter is used.
     * 
     * @return the topLogprobs value.
     */
    @Generated
    public Integer getTopLogprobs() {
        return this.topLogprobs;
    }

    /**
     * Set the topLogprobs property: An integer between 0 and 20 specifying the number of most likely tokens to return
     * at each token position, each with an associated log probability. `logprobs` must be set to `true` if this
     * parameter is used.
     * 
     * @param topLogprobs the topLogprobs value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setTopLogprobs(Integer topLogprobs) {
        this.topLogprobs = topLogprobs;
        return this;
    }

    /**
     * Get the maxTokens property: The maximum number of [tokens](/tokenizer) that can be generated in the chat
     * completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via
     * API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     * 
     * @return the maxTokens value.
     */
    @Generated
    public Integer getMaxTokens() {
        return this.maxTokens;
    }

    /**
     * Set the maxTokens property: The maximum number of [tokens](/tokenizer) that can be generated in the chat
     * completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via
     * API.
     * 
     * This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series
     * models](/docs/guides/reasoning).
     * 
     * @param maxTokens the maxTokens value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setMaxTokens(Integer maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }

    /**
     * Get the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     * 
     * @return the maxCompletionTokens value.
     */
    @Generated
    public Integer getMaxCompletionTokens() {
        return this.maxCompletionTokens;
    }

    /**
     * Set the maxCompletionTokens property: An upper bound for the number of tokens that can be generated for a
     * completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
     * 
     * @param maxCompletionTokens the maxCompletionTokens value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setMaxCompletionTokens(Integer maxCompletionTokens) {
        this.maxCompletionTokens = maxCompletionTokens;
        return this;
    }

    /**
     * Get the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @return the n value.
     */
    @Generated
    public Integer getN() {
        return this.n;
    }

    /**
     * Set the n property: How many chat completion choices to generate for each input message. Note that you will be
     * charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     * 
     * @param n the n value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setN(Integer n) {
        this.n = n;
        return this;
    }

    /**
     * Get the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @return the presencePenalty value.
     */
    @Generated
    public Double getPresencePenalty() {
        return this.presencePenalty;
    }

    /**
     * Set the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details).
     * 
     * @param presencePenalty the presencePenalty value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setPresencePenalty(Double presencePenalty) {
        this.presencePenalty = presencePenalty;
        return this;
    }

    /**
     * Get the responseFormat property: An object specifying the format that the model must output. Compatible with
     * [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4
     * Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @return the responseFormat value.
     */
    @Generated
    public ChatResponseFormat getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Set the responseFormat property: An object specifying the format that the model must output. Compatible with
     * [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4
     * Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
     * 
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model
     * will match your supplied JSON schema. Learn more in the [Structured Outputs
     * guide](/docs/guides/structured-outputs).
     * 
     * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid
     * JSON.
     * 
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system
     * or user message. Without this, the model may generate an unending stream of whitespace until the generation
     * reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message
     * content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded
     * `max_tokens` or the conversation exceeded the max context length.
     * 
     * @param responseFormat the responseFormat value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setResponseFormat(ChatResponseFormat responseFormat) {
        this.responseFormat = responseFormat;
        return this;
    }

    /**
     * Get the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @return the seed value.
     */
    @Generated
    public Long getSeed() {
        return this.seed;
    }

    /**
     * Set the seed property: This feature is in Beta.
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with
     * the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor
     * changes in the backend.
     * 
     * @param seed the seed value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setSeed(Long seed) {
        this.seed = seed;
        return this;
    }

    /**
     * Get the serviceTier property: Specifies the latency tier to use for processing the request. This parameter is
     * relevant for customers subscribed to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     * 
     * @return the serviceTier value.
     */
    @Generated
    public CreateChatCompletionRequestServiceTier getServiceTier() {
        return this.serviceTier;
    }

    /**
     * Set the serviceTier property: Specifies the latency tier to use for processing the request. This parameter is
     * relevant for customers subscribed to the scale tier service:
     * - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they
     * are exhausted.
     * - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default
     * service tier with a lower uptime SLA and no latency guarentee.
     * - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and
     * no latency guarentee.
     * - When not set, the default behavior is 'auto'.
     * 
     * When this parameter is set, the response body will include the `service_tier` utilized.
     * 
     * @param serviceTier the serviceTier value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setServiceTier(CreateChatCompletionRequestServiceTier serviceTier) {
        this.serviceTier = serviceTier;
        return this;
    }

    /**
     * Get the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @return the stop value.
     */
    @Generated
    public BinaryData getStop() {
        return this.stop;
    }

    /**
     * Set the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @param stop the stop value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setStop(BinaryData stop) {
        this.stop = stop;
        return this;
    }

    /**
     * Get the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_stream_completions).
     * 
     * @return the stream value.
     */
    @Generated
    public Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python
     * code](https://cookbook.openai.com/examples/how_to_stream_completions).
     * 
     * @param stream the stream value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /**
     * Get the streamOptions property: The stream_options property.
     * 
     * @return the streamOptions value.
     */
    @Generated
    public ChatCompletionStreamOptions getStreamOptions() {
        return this.streamOptions;
    }

    /**
     * Set the streamOptions property: The stream_options property.
     * 
     * @param streamOptions the streamOptions value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setStreamOptions(ChatCompletionStreamOptions streamOptions) {
        this.streamOptions = streamOptions;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make
     * the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @param temperature the temperature value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top
     * 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @return the topP value.
     */
    @Generated
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top
     * 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @param topP the topP value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @return the tools value.
     */
    @Generated
    public List<ChatCompletionTool> getTools() {
        return this.tools;
    }

    /**
     * Set the tools property: A list of tools the model may call. Currently, only functions are supported as a tool.
     * Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are
     * supported.
     * 
     * @param tools the tools value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setTools(List<ChatCompletionTool> tools) {
        this.tools = tools;
        return this;
    }

    /**
     * Get the toolChoice property: The tool_choice property.
     * 
     * @return the toolChoice value.
     */
    @Generated
    public BinaryData getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Set the toolChoice property: The tool_choice property.
     * 
     * @param toolChoice the toolChoice value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setToolChoice(BinaryData toolChoice) {
        this.toolChoice = toolChoice;
        return this;
    }

    /**
     * Get the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @return the parallelToolCalls value.
     */
    @Generated
    public Boolean isParallelToolCalls() {
        return this.parallelToolCalls;
    }

    /**
     * Set the parallelToolCalls property: The parallel_tool_calls property.
     * 
     * @param parallelToolCalls the parallelToolCalls value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setParallelToolCalls(Boolean parallelToolCalls) {
        this.parallelToolCalls = parallelToolCalls;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @return the user value.
     */
    @Generated
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @param user the user value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     * 
     * @return the functionCall value.
     */
    @Generated
    public BinaryData getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Set the functionCall property: Deprecated in favor of `tool_choice`.
     * 
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     * 
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     * 
     * @param functionCall the functionCall value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setFunctionCall(BinaryData functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    /**
     * Get the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @return the functions value.
     */
    @Generated
    public List<ChatCompletionFunctions> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: Deprecated in favor of `tools`.
     * 
     * A list of functions the model may generate JSON inputs for.
     * 
     * @param functions the functions value to set.
     * @return the CreateChatCompletionOptions object itself.
     */
    @Generated
    public CreateChatCompletionOptions setFunctions(List<ChatCompletionFunctions> functions) {
        this.functions = functions;
        return this;
    }
}
