// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Audios.
 */
public final class AudiosImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AudiosService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of AudiosImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AudiosImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(AudiosService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientAudios to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://api.openai.com/v1")
    @ServiceInterface(name = "OpenAIClientAudios")
    public interface AudiosService {
        @Post("/audio/speech")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createSpeech(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/audio/speech")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSpeechSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/audio/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createTranscription(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @BodyParam("multipart/form-data") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/audio/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTranscriptionSync(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @BodyParam("multipart/form-data") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/audio/translations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createTranslation(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @BodyParam("multipart/form-data") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/audio/translations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTranslationSync(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @BodyParam("multipart/form-data") BinaryData requestBody,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Generates audio from the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(tts-1/tts-1-hd) (Required)
     *     input: String (Required)
     *     voice: String(alloy/echo/fable/onyx/nova/shimmer) (Required)
     *     response_format: String(mp3/opus/aac/flac/wav/pcm) (Optional)
     *     speed: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createSpeechWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return FluxUtil.withContext(context -> service.createSpeech(accept, requestBody, requestOptions, context));
    }

    /**
     * Generates audio from the input text.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(tts-1/tts-1-hd) (Required)
     *     input: String (Required)
     *     voice: String(alloy/echo/fable/onyx/nova/shimmer) (Required)
     *     response_format: String(mp3/opus/aac/flac/wav/pcm) (Optional)
     *     speed: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createSpeechWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return service.createSpeechSync(accept, requestBody, requestOptions, Context.NONE);
    }

    /**
     * Transcribes audio into the input language.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     task: String (Required)
     *     language: String (Required)
     *     duration: double (Required)
     *     text: String (Required)
     *     words (Optional): [
     *          (Optional){
     *             word: String (Required)
     *             start: double (Required)
     *             end: double (Required)
     *         }
     *     ]
     *     segments (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             seek: int (Required)
     *             start: double (Required)
     *             end: double (Required)
     *             text: String (Required)
     *             tokens (Required): [
     *                 int (Required)
     *             ]
     *             temperature: double (Required)
     *             avg_logprob: double (Required)
     *             compression_ratio: double (Required)
     *             no_speech_prob: double (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a verbose json transcription response returned by model, based on the provided input along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createTranscriptionWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return FluxUtil.withContext(
            context -> service.createTranscription(accept, contentType, requestBody, requestOptions, context));
    }

    /**
     * Transcribes audio into the input language.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     task: String (Required)
     *     language: String (Required)
     *     duration: double (Required)
     *     text: String (Required)
     *     words (Optional): [
     *          (Optional){
     *             word: String (Required)
     *             start: double (Required)
     *             end: double (Required)
     *         }
     *     ]
     *     segments (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             seek: int (Required)
     *             start: double (Required)
     *             end: double (Required)
     *             text: String (Required)
     *             tokens (Required): [
     *                 int (Required)
     *             ]
     *             temperature: double (Required)
     *             avg_logprob: double (Required)
     *             compression_ratio: double (Required)
     *             no_speech_prob: double (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a verbose json transcription response returned by model, based on the provided input along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTranscriptionWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.createTranscriptionSync(accept, contentType, requestBody, requestOptions, Context.NONE);
    }

    /**
     * Translates audio into English..
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     task: String (Required)
     *     language: String (Required)
     *     duration: double (Required)
     *     text: String (Required)
     *     segments (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             seek: int (Required)
     *             start: double (Required)
     *             end: double (Required)
     *             text: String (Required)
     *             tokens (Required): [
     *                 int (Required)
     *             ]
     *             temperature: double (Required)
     *             avg_logprob: double (Required)
     *             compression_ratio: double (Required)
     *             no_speech_prob: double (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createTranslationWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return FluxUtil.withContext(
            context -> service.createTranslation(accept, contentType, requestBody, requestOptions, context));
    }

    /**
     * Translates audio into English..
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     task: String (Required)
     *     language: String (Required)
     *     duration: double (Required)
     *     text: String (Required)
     *     segments (Optional): [
     *          (Optional){
     *             id: int (Required)
     *             seek: int (Required)
     *             start: double (Required)
     *             end: double (Required)
     *             text: String (Required)
     *             tokens (Required): [
     *                 int (Required)
     *             ]
     *             temperature: double (Required)
     *             avg_logprob: double (Required)
     *             compression_ratio: double (Required)
     *             no_speech_prob: double (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTranslationWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.createTranslationSync(accept, contentType, requestBody, requestOptions, Context.NONE);
    }
}
