// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Completions.
 */
public final class CompletionsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CompletionsService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of CompletionsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CompletionsImpl(OpenAIClientImpl client) {
        this.service
            = RestProxy.create(CompletionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientCompletions to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://api.openai.com/v1")
    @ServiceInterface(name = "OpenAIClientCompleti")
    public interface CompletionsService {
        @Post("/completions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createCompletion(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/completions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createCompletionSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(gpt-3.5-turbo-instruct/davinci-002/babbage-002) (Required)
     *     prompt: BinaryData (Required)
     *     best_of: Integer (Optional)
     *     echo: Boolean (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: int (Required)
     *     }
     *     logprobs: Integer (Optional)
     *     max_tokens: Integer (Optional)
     *     n: Integer (Optional)
     *     presence_penalty: Double (Optional)
     *     seed: Long (Optional)
     *     stop: BinaryData (Optional)
     *     stream: Boolean (Optional)
     *     stream_options (Optional): {
     *         include_usage: Boolean (Optional)
     *     }
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     choices (Required): [
     *          (Required){
     *             finish_reason: String(stop/length/content_filter) (Required)
     *             index: int (Required)
     *             logprobs (Required): {
     *                 text_offset (Optional): [
     *                     int (Optional)
     *                 ]
     *                 token_logprobs (Optional): [
     *                     double (Optional)
     *                 ]
     *                 tokens (Optional): [
     *                     String (Optional)
     *                 ]
     *                 top_logprobs (Optional): [
     *                      (Optional){
     *                         String: double (Required)
     *                     }
     *                 ]
     *             }
     *             text: String (Required)
     *         }
     *     ]
     *     created: long (Required)
     *     model: String (Required)
     *     system_fingerprint: String (Optional)
     *     object: String (Required)
     *     usage (Optional): {
     *         completion_tokens: int (Required)
     *         prompt_tokens: int (Required)
     *         total_tokens: int (Required)
     *         completion_tokens_details (Optional): {
     *             audio_tokens: Integer (Optional)
     *             reasoning_tokens: Integer (Optional)
     *         }
     *         prompt_tokens_details (Optional): {
     *             audio_tokens: Integer (Optional)
     *             cached_tokens: Integer (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a completion response from the API along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCompletionWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createCompletion(accept, requestBody, requestOptions, context));
    }

    /**
     * Creates a completion for the provided prompt and parameters.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     model: String(gpt-3.5-turbo-instruct/davinci-002/babbage-002) (Required)
     *     prompt: BinaryData (Required)
     *     best_of: Integer (Optional)
     *     echo: Boolean (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: int (Required)
     *     }
     *     logprobs: Integer (Optional)
     *     max_tokens: Integer (Optional)
     *     n: Integer (Optional)
     *     presence_penalty: Double (Optional)
     *     seed: Long (Optional)
     *     stop: BinaryData (Optional)
     *     stream: Boolean (Optional)
     *     stream_options (Optional): {
     *         include_usage: Boolean (Optional)
     *     }
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     choices (Required): [
     *          (Required){
     *             finish_reason: String(stop/length/content_filter) (Required)
     *             index: int (Required)
     *             logprobs (Required): {
     *                 text_offset (Optional): [
     *                     int (Optional)
     *                 ]
     *                 token_logprobs (Optional): [
     *                     double (Optional)
     *                 ]
     *                 tokens (Optional): [
     *                     String (Optional)
     *                 ]
     *                 top_logprobs (Optional): [
     *                      (Optional){
     *                         String: double (Required)
     *                     }
     *                 ]
     *             }
     *             text: String (Required)
     *         }
     *     ]
     *     created: long (Required)
     *     model: String (Required)
     *     system_fingerprint: String (Optional)
     *     object: String (Required)
     *     usage (Optional): {
     *         completion_tokens: int (Required)
     *         prompt_tokens: int (Required)
     *         total_tokens: int (Required)
     *         completion_tokens_details (Optional): {
     *             audio_tokens: Integer (Optional)
     *             reasoning_tokens: Integer (Optional)
     *         }
     *         prompt_tokens_details (Optional): {
     *             audio_tokens: Integer (Optional)
     *             cached_tokens: Integer (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a completion response from the API along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCompletionWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createCompletionSync(accept, requestBody, requestOptions, Context.NONE);
    }
}
