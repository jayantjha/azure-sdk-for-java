// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ChatCompletionRequestAssistantMessageFunctionCall model.
 */
@Immutable
public final class ChatCompletionRequestAssistantMessageFunctionCall
    implements JsonSerializable<ChatCompletionRequestAssistantMessageFunctionCall> {
    /*
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not
     * always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the
     * arguments in your code before calling your function.
     */
    @Generated
    private final String arguments;

    /*
     * The name of the function to call.
     */
    @Generated
    private final String name;

    /**
     * Creates an instance of ChatCompletionRequestAssistantMessageFunctionCall class.
     * 
     * @param arguments the arguments value to set.
     * @param name the name value to set.
     */
    @Generated
    public ChatCompletionRequestAssistantMessageFunctionCall(String arguments, String name) {
        this.arguments = arguments;
        this.name = name;
    }

    /**
     * Get the arguments property: The arguments to call the function with, as generated by the model in JSON format.
     * Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your
     * function schema. Validate the arguments in your code before calling your function.
     * 
     * @return the arguments value.
     */
    @Generated
    public String getArguments() {
        return this.arguments;
    }

    /**
     * Get the name property: The name of the function to call.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arguments", this.arguments);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestAssistantMessageFunctionCall from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestAssistantMessageFunctionCall if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestAssistantMessageFunctionCall.
     */
    @Generated
    public static ChatCompletionRequestAssistantMessageFunctionCall fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String arguments = null;
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arguments".equals(fieldName)) {
                    arguments = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ChatCompletionRequestAssistantMessageFunctionCall(arguments, name);
        });
    }
}
