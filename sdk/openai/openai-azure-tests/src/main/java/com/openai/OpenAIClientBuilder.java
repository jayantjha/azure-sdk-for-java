// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import com.openai.implementation.OpenAIClientImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the OpenAIClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        AudioClient.class,
        AssistantsClient.class,
        BatchesClient.class,
        ChatClient.class,
        CompletionsClient.class,
        EmbeddingsClient.class,
        FilesClient.class,
        FineTuningClient.class,
        ImagesClient.class,
        MessagesClient.class,
        ModelsClient.class,
        ModerationsClient.class,
        RealtimeClient.class,
        ThreadsClient.class,
        RunsClient.class,
        VectorStoresClient.class,
        UploadsClient.class,
        AudioAsyncClient.class,
        AssistantsAsyncClient.class,
        BatchesAsyncClient.class,
        ChatAsyncClient.class,
        CompletionsAsyncClient.class,
        EmbeddingsAsyncClient.class,
        FilesAsyncClient.class,
        FineTuningAsyncClient.class,
        ImagesAsyncClient.class,
        MessagesAsyncClient.class,
        ModelsAsyncClient.class,
        ModerationsAsyncClient.class,
        RealtimeAsyncClient.class,
        ThreadsAsyncClient.class,
        RunsAsyncClient.class,
        VectorStoresAsyncClient.class,
        UploadsAsyncClient.class })
public final class OpenAIClientBuilder
    implements HttpTrait<OpenAIClientBuilder>, ConfigurationTrait<OpenAIClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("openai.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the OpenAIClientBuilder.
     */
    @Generated
    public OpenAIClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OpenAIClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the OpenAIClientBuilder.
     */
    @Generated
    public OpenAIClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of OpenAIClientImpl with the provided parameters.
     * 
     * @return an instance of OpenAIClientImpl.
     */
    @Generated
    private OpenAIClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        OpenAIClientImpl client = new OpenAIClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter());
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of AudioAsyncClient class.
     * 
     * @return an instance of AudioAsyncClient.
     */
    @Generated
    public AudioAsyncClient buildAudioAsyncClient() {
        return new AudioAsyncClient(buildInnerClient().getAudios());
    }

    /**
     * Builds an instance of AssistantsAsyncClient class.
     * 
     * @return an instance of AssistantsAsyncClient.
     */
    @Generated
    public AssistantsAsyncClient buildAssistantsAsyncClient() {
        return new AssistantsAsyncClient(buildInnerClient().getAssistants());
    }

    /**
     * Builds an instance of BatchesAsyncClient class.
     * 
     * @return an instance of BatchesAsyncClient.
     */
    @Generated
    public BatchesAsyncClient buildBatchesAsyncClient() {
        return new BatchesAsyncClient(buildInnerClient().getBatches());
    }

    /**
     * Builds an instance of ChatAsyncClient class.
     * 
     * @return an instance of ChatAsyncClient.
     */
    @Generated
    public ChatAsyncClient buildChatAsyncClient() {
        return new ChatAsyncClient(buildInnerClient().getChats());
    }

    /**
     * Builds an instance of CompletionsAsyncClient class.
     * 
     * @return an instance of CompletionsAsyncClient.
     */
    @Generated
    public CompletionsAsyncClient buildCompletionsAsyncClient() {
        return new CompletionsAsyncClient(buildInnerClient().getCompletions());
    }

    /**
     * Builds an instance of EmbeddingsAsyncClient class.
     * 
     * @return an instance of EmbeddingsAsyncClient.
     */
    @Generated
    public EmbeddingsAsyncClient buildEmbeddingsAsyncClient() {
        return new EmbeddingsAsyncClient(buildInnerClient().getEmbeddings());
    }

    /**
     * Builds an instance of FilesAsyncClient class.
     * 
     * @return an instance of FilesAsyncClient.
     */
    @Generated
    public FilesAsyncClient buildFilesAsyncClient() {
        return new FilesAsyncClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of FineTuningAsyncClient class.
     * 
     * @return an instance of FineTuningAsyncClient.
     */
    @Generated
    public FineTuningAsyncClient buildFineTuningAsyncClient() {
        return new FineTuningAsyncClient(buildInnerClient().getFineTunings());
    }

    /**
     * Builds an instance of ImagesAsyncClient class.
     * 
     * @return an instance of ImagesAsyncClient.
     */
    @Generated
    public ImagesAsyncClient buildImagesAsyncClient() {
        return new ImagesAsyncClient(buildInnerClient().getImages());
    }

    /**
     * Builds an instance of MessagesAsyncClient class.
     * 
     * @return an instance of MessagesAsyncClient.
     */
    @Generated
    public MessagesAsyncClient buildMessagesAsyncClient() {
        return new MessagesAsyncClient(buildInnerClient().getMessages());
    }

    /**
     * Builds an instance of ModelsAsyncClient class.
     * 
     * @return an instance of ModelsAsyncClient.
     */
    @Generated
    public ModelsAsyncClient buildModelsAsyncClient() {
        return new ModelsAsyncClient(buildInnerClient().getModels());
    }

    /**
     * Builds an instance of ModerationsAsyncClient class.
     * 
     * @return an instance of ModerationsAsyncClient.
     */
    @Generated
    public ModerationsAsyncClient buildModerationsAsyncClient() {
        return new ModerationsAsyncClient(buildInnerClient().getModerations());
    }

    /**
     * Builds an instance of RealtimeAsyncClient class.
     * 
     * @return an instance of RealtimeAsyncClient.
     */
    @Generated
    public RealtimeAsyncClient buildRealtimeAsyncClient() {
        return new RealtimeAsyncClient(buildInnerClient().getRealtimes());
    }

    /**
     * Builds an instance of ThreadsAsyncClient class.
     * 
     * @return an instance of ThreadsAsyncClient.
     */
    @Generated
    public ThreadsAsyncClient buildThreadsAsyncClient() {
        return new ThreadsAsyncClient(buildInnerClient().getThreads());
    }

    /**
     * Builds an instance of RunsAsyncClient class.
     * 
     * @return an instance of RunsAsyncClient.
     */
    @Generated
    public RunsAsyncClient buildRunsAsyncClient() {
        return new RunsAsyncClient(buildInnerClient().getRuns());
    }

    /**
     * Builds an instance of VectorStoresAsyncClient class.
     * 
     * @return an instance of VectorStoresAsyncClient.
     */
    @Generated
    public VectorStoresAsyncClient buildVectorStoresAsyncClient() {
        return new VectorStoresAsyncClient(buildInnerClient().getVectorStores());
    }

    /**
     * Builds an instance of UploadsAsyncClient class.
     * 
     * @return an instance of UploadsAsyncClient.
     */
    @Generated
    public UploadsAsyncClient buildUploadsAsyncClient() {
        return new UploadsAsyncClient(buildInnerClient().getUploads());
    }

    /**
     * Builds an instance of AudioClient class.
     * 
     * @return an instance of AudioClient.
     */
    @Generated
    public AudioClient buildAudioClient() {
        return new AudioClient(buildInnerClient().getAudios());
    }

    /**
     * Builds an instance of AssistantsClient class.
     * 
     * @return an instance of AssistantsClient.
     */
    @Generated
    public AssistantsClient buildAssistantsClient() {
        return new AssistantsClient(buildInnerClient().getAssistants());
    }

    /**
     * Builds an instance of BatchesClient class.
     * 
     * @return an instance of BatchesClient.
     */
    @Generated
    public BatchesClient buildBatchesClient() {
        return new BatchesClient(buildInnerClient().getBatches());
    }

    /**
     * Builds an instance of ChatClient class.
     * 
     * @return an instance of ChatClient.
     */
    @Generated
    public ChatClient buildChatClient() {
        return new ChatClient(buildInnerClient().getChats());
    }

    /**
     * Builds an instance of CompletionsClient class.
     * 
     * @return an instance of CompletionsClient.
     */
    @Generated
    public CompletionsClient buildCompletionsClient() {
        return new CompletionsClient(buildInnerClient().getCompletions());
    }

    /**
     * Builds an instance of EmbeddingsClient class.
     * 
     * @return an instance of EmbeddingsClient.
     */
    @Generated
    public EmbeddingsClient buildEmbeddingsClient() {
        return new EmbeddingsClient(buildInnerClient().getEmbeddings());
    }

    /**
     * Builds an instance of FilesClient class.
     * 
     * @return an instance of FilesClient.
     */
    @Generated
    public FilesClient buildFilesClient() {
        return new FilesClient(buildInnerClient().getFiles());
    }

    /**
     * Builds an instance of FineTuningClient class.
     * 
     * @return an instance of FineTuningClient.
     */
    @Generated
    public FineTuningClient buildFineTuningClient() {
        return new FineTuningClient(buildInnerClient().getFineTunings());
    }

    /**
     * Builds an instance of ImagesClient class.
     * 
     * @return an instance of ImagesClient.
     */
    @Generated
    public ImagesClient buildImagesClient() {
        return new ImagesClient(buildInnerClient().getImages());
    }

    /**
     * Builds an instance of MessagesClient class.
     * 
     * @return an instance of MessagesClient.
     */
    @Generated
    public MessagesClient buildMessagesClient() {
        return new MessagesClient(buildInnerClient().getMessages());
    }

    /**
     * Builds an instance of ModelsClient class.
     * 
     * @return an instance of ModelsClient.
     */
    @Generated
    public ModelsClient buildModelsClient() {
        return new ModelsClient(buildInnerClient().getModels());
    }

    /**
     * Builds an instance of ModerationsClient class.
     * 
     * @return an instance of ModerationsClient.
     */
    @Generated
    public ModerationsClient buildModerationsClient() {
        return new ModerationsClient(buildInnerClient().getModerations());
    }

    /**
     * Builds an instance of RealtimeClient class.
     * 
     * @return an instance of RealtimeClient.
     */
    @Generated
    public RealtimeClient buildRealtimeClient() {
        return new RealtimeClient(buildInnerClient().getRealtimes());
    }

    /**
     * Builds an instance of ThreadsClient class.
     * 
     * @return an instance of ThreadsClient.
     */
    @Generated
    public ThreadsClient buildThreadsClient() {
        return new ThreadsClient(buildInnerClient().getThreads());
    }

    /**
     * Builds an instance of RunsClient class.
     * 
     * @return an instance of RunsClient.
     */
    @Generated
    public RunsClient buildRunsClient() {
        return new RunsClient(buildInnerClient().getRuns());
    }

    /**
     * Builds an instance of VectorStoresClient class.
     * 
     * @return an instance of VectorStoresClient.
     */
    @Generated
    public VectorStoresClient buildVectorStoresClient() {
        return new VectorStoresClient(buildInnerClient().getVectorStores());
    }

    /**
     * Builds an instance of UploadsClient class.
     * 
     * @return an instance of UploadsClient.
     */
    @Generated
    public UploadsClient buildUploadsClient() {
        return new UploadsClient(buildInnerClient().getUploads());
    }

    private static final ClientLogger LOGGER = new ClientLogger(OpenAIClientBuilder.class);
}
