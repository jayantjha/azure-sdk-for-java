// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Uploads.
 */
public final class UploadsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final UploadsService service;

    /**
     * The service client containing this operation class.
     */
    private final OpenAIClientImpl client;

    /**
     * Initializes an instance of UploadsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    UploadsImpl(OpenAIClientImpl client) {
        this.service = RestProxy.create(UploadsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for OpenAIClientUploads to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://api.openai.com/v1")
    @ServiceInterface(name = "OpenAIClientUploads")
    public interface UploadsService {
        @Post("/uploads")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createUpload(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/uploads")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createUploadSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData requestBody, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/uploads/{upload_id}/parts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addUploadPart(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @PathParam("upload_id") String uploadId,
            @BodyParam("multipart/form-data") BinaryData requestBody, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/uploads/{upload_id}/parts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> addUploadPartSync(@HeaderParam("accept") String accept,
            @HeaderParam("content-type") String contentType, @PathParam("upload_id") String uploadId,
            @BodyParam("multipart/form-data") BinaryData requestBody, RequestOptions requestOptions, Context context);

        @Post("/uploads/{upload_id}/complete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> completeUpload(@HeaderParam("accept") String accept,
            @PathParam("upload_id") String uploadId, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        @Post("/uploads/{upload_id}/complete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> completeUploadSync(@HeaderParam("accept") String accept,
            @PathParam("upload_id") String uploadId, @BodyParam("application/json") BinaryData requestBody,
            RequestOptions requestOptions, Context context);

        @Post("/uploads/{upload_id}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelUpload(@HeaderParam("accept") String accept,
            @PathParam("upload_id") String uploadId, RequestOptions requestOptions, Context context);

        @Post("/uploads/{upload_id}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelUploadSync(@HeaderParam("accept") String accept,
            @PathParam("upload_id") String uploadId, RequestOptions requestOptions, Context context);
    }

    /**
     * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add
     * [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and
     * expires after an hour after you create it.
     * 
     * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all
     * the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
     * 
     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the
     * supported MIME types for your use case:
     * - [Assistants](/docs/assistants/tools/file-search/supported-files)
     * 
     * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a
     * File](/docs/api-reference/files/create).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     filename: String (Required)
     *     purpose: String(assistants/batch/fine-tune/vision) (Required)
     *     bytes: int (Required)
     *     mime_type: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createUploadWithResponseAsync(BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createUpload(accept, requestBody, requestOptions, context));
    }

    /**
     * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add
     * [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and
     * expires after an hour after you create it.
     * 
     * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all
     * the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
     * 
     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the
     * supported MIME types for your use case:
     * - [Assistants](/docs/assistants/tools/file-search/supported-files)
     * 
     * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a
     * File](/docs/api-reference/files/create).
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     filename: String (Required)
     *     purpose: String(assistants/batch/fine-tune/vision) (Required)
     *     bytes: int (Required)
     *     mime_type: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createUploadWithResponse(BinaryData requestBody, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createUploadSync(accept, requestBody, requestOptions, Context.NONE);
    }

    /**
     * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     * 
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
     * 
     * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you
     * [complete the Upload](/docs/api-reference/uploads/complete).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     upload_id: String (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the upload Part represents a chunk of bytes we can add to an Upload object along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addUploadPartWithResponseAsync(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return FluxUtil.withContext(
            context -> service.addUploadPart(accept, contentType, uploadId, requestBody, requestOptions, context));
    }

    /**
     * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     * 
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
     * 
     * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you
     * [complete the Upload](/docs/api-reference/uploads/complete).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     upload_id: String (Required)
     *     object: String (Required)
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the upload Part represents a chunk of bytes we can add to an Upload object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addUploadPartWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        final String contentType = "multipart/form-data";
        return service.addUploadPartSync(accept, contentType, uploadId, requestBody, requestOptions, Context.NONE);
    }

    /**
     * Completes the [Upload](/docs/api-reference/uploads/object).
     * 
     * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is
     * ready to use in the rest of the platform.
     * 
     * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
     * 
     * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the
     * Upload object. No Parts may be added after an Upload is completed.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     part_ids (Required): [
     *         String (Required)
     *     ]
     *     md5: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completeUploadWithResponseAsync(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.completeUpload(accept, uploadId, requestBody, requestOptions, context));
    }

    /**
     * Completes the [Upload](/docs/api-reference/uploads/object).
     * 
     * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is
     * ready to use in the rest of the platform.
     * 
     * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
     * 
     * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the
     * Upload object. No Parts may be added after an Upload is completed.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     part_ids (Required): [
     *         String (Required)
     *     ]
     *     md5: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestBody The requestBody parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> completeUploadWithResponse(String uploadId, BinaryData requestBody,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.completeUploadSync(accept, uploadId, requestBody, requestOptions, Context.NONE);
    }

    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelUploadWithResponseAsync(String uploadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.cancelUpload(accept, uploadId, requestOptions, context));
    }

    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     created_at: long (Required)
     *     filename: String (Required)
     *     bytes: int (Required)
     *     purpose: String (Required)
     *     status: String(pending/completed/cancelled/expired) (Required)
     *     expires_at: long (Required)
     *     object: String(upload) (Optional)
     *     file (Optional): {
     *         id: String (Required)
     *         bytes: Integer (Required)
     *         created_at: long (Required)
     *         filename: String (Required)
     *         object: String (Required)
     *         purpose: String(assistants/assistants_output/batch/batch_output/fine-tune/fine-tune-results/vision) (Required)
     *         status: String(uploaded/processed/error) (Required)
     *         status_details: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param uploadId The uploadId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Upload object can accept byte chunks in the form of Parts along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelUploadSync(accept, uploadId, requestOptions, Context.NONE);
    }
}
