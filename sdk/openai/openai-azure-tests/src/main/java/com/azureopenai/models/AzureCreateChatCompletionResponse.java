// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azureopenai.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;

/**
 * The extended top-level chat completion response model for the Azure OpenAI service.
 * This model adds Responsible AI content filter annotations for prompt input.
 */
@Immutable
public final class AzureCreateChatCompletionResponse extends CreateChatCompletionResponse {
    /*
     * The Responsible AI content filter annotations associated with prompt inputs into chat completions.
     */
    @Generated
    private List<AzureCreateChatCompletionResponsePromptFilterResult> promptFilterResults;

    /*
     * The usage property.
     */
    @Generated
    private CompletionUsage usage;

    /*
     * This fingerprint represents the backend configuration that the model runs with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     */
    @Generated
    private String systemFingerprint;

    /*
     * The service tier used for processing the request. This field is only included if the `service_tier` parameter is
     * specified in the request.
     */
    @Generated
    private CreateChatCompletionResponseServiceTier serviceTier;

    /**
     * Creates an instance of AzureCreateChatCompletionResponse class.
     * 
     * @param id the id value to set.
     * @param choices the choices value to set.
     * @param created the created value to set.
     * @param model the model value to set.
     * @param object the object value to set.
     */
    @Generated
    private AzureCreateChatCompletionResponse(String id, List<CreateChatCompletionResponseChoice> choices,
        OffsetDateTime created, String model, String object) {
        super(id, choices, created, model, object);
    }

    /**
     * Get the promptFilterResults property: The Responsible AI content filter annotations associated with prompt inputs
     * into chat completions.
     * 
     * @return the promptFilterResults value.
     */
    @Generated
    public List<AzureCreateChatCompletionResponsePromptFilterResult> getPromptFilterResults() {
        return this.promptFilterResults;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Generated
    @Override
    public CompletionUsage getUsage() {
        return this.usage;
    }

    /**
     * Get the systemFingerprint property: This fingerprint represents the backend configuration that the model runs
     * with.
     * 
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that might impact determinism.
     * 
     * @return the systemFingerprint value.
     */
    @Generated
    @Override
    public String getSystemFingerprint() {
        return this.systemFingerprint;
    }

    /**
     * Get the serviceTier property: The service tier used for processing the request. This field is only included if
     * the `service_tier` parameter is specified in the request.
     * 
     * @return the serviceTier value.
     */
    @Generated
    @Override
    public CreateChatCompletionResponseServiceTier getServiceTier() {
        return this.serviceTier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("choices", getChoices(), (writer, element) -> writer.writeJson(element));
        if (getCreated() != null) {
            jsonWriter.writeLongField("created", getCreated().toEpochSecond());
        }
        jsonWriter.writeStringField("model", getModel());
        jsonWriter.writeStringField("object", getObject());
        jsonWriter.writeStringField("service_tier", getServiceTier() == null ? null : getServiceTier().toString());
        jsonWriter.writeStringField("system_fingerprint", getSystemFingerprint());
        jsonWriter.writeJsonField("usage", getUsage());
        jsonWriter.writeArrayField("prompt_filter_results", this.promptFilterResults,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureCreateChatCompletionResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureCreateChatCompletionResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureCreateChatCompletionResponse.
     */
    @Generated
    public static AzureCreateChatCompletionResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<CreateChatCompletionResponseChoice> choices = null;
            OffsetDateTime created = null;
            String model = null;
            CreateChatCompletionResponseServiceTier serviceTier = null;
            String systemFingerprint = null;
            CompletionUsage usage = null;
            List<AzureCreateChatCompletionResponsePromptFilterResult> promptFilterResults = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("choices".equals(fieldName)) {
                    choices = reader.readArray(reader1 -> CreateChatCompletionResponseChoice.fromJson(reader1));
                } else if ("created".equals(fieldName)) {
                    created = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("service_tier".equals(fieldName)) {
                    serviceTier = CreateChatCompletionResponseServiceTier.fromString(reader.getString());
                } else if ("system_fingerprint".equals(fieldName)) {
                    systemFingerprint = reader.getString();
                } else if ("usage".equals(fieldName)) {
                    usage = CompletionUsage.fromJson(reader);
                } else if ("prompt_filter_results".equals(fieldName)) {
                    promptFilterResults = reader
                        .readArray(reader1 -> AzureCreateChatCompletionResponsePromptFilterResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AzureCreateChatCompletionResponse deserializedAzureCreateChatCompletionResponse
                = new AzureCreateChatCompletionResponse(id, choices, created, model);
            deserializedAzureCreateChatCompletionResponse.serviceTier = serviceTier;
            deserializedAzureCreateChatCompletionResponse.systemFingerprint = systemFingerprint;
            deserializedAzureCreateChatCompletionResponse.usage = usage;
            deserializedAzureCreateChatCompletionResponse.promptFilterResults = promptFilterResults;

            return deserializedAzureCreateChatCompletionResponse;
        });
    }
}
