// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.openai.AssistantsClient;
import com.openai.AudioClient;
import com.openai.BatchesClient;
import com.openai.ChatClient;
import com.openai.CompletionsClient;
import com.openai.EmbeddingsClient;
import com.openai.FilesClient;
import com.openai.FineTuningClient;
import com.openai.ImagesClient;
import com.openai.MessagesClient;
import com.openai.ModelsClient;
import com.openai.ModerationsClient;
import com.openai.OpenAIClientBuilder;
import com.openai.RealtimeClient;
import com.openai.RunsClient;
import com.openai.ThreadsClient;
import com.openai.UploadsClient;
import com.openai.VectorStoresClient;

class OpenAIClientTestBase extends TestProxyTestBase {
    protected AudioClient audioClient;

    protected AssistantsClient assistantsClient;

    protected BatchesClient batchesClient;

    protected ChatClient chatClient;

    protected CompletionsClient completionsClient;

    protected EmbeddingsClient embeddingsClient;

    protected FilesClient filesClient;

    protected FineTuningClient fineTuningClient;

    protected ImagesClient imagesClient;

    protected MessagesClient messagesClient;

    protected ModelsClient modelsClient;

    protected ModerationsClient moderationsClient;

    protected RealtimeClient realtimeClient;

    protected ThreadsClient threadsClient;

    protected RunsClient runsClient;

    protected VectorStoresClient vectorStoresClient;

    protected UploadsClient uploadsClient;

    @Override
    protected void beforeTest() {
        OpenAIClientBuilder audioClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            audioClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            audioClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        audioClient = audioClientbuilder.buildAudioClient();

        OpenAIClientBuilder assistantsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            assistantsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            assistantsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        assistantsClient = assistantsClientbuilder.buildAssistantsClient();

        OpenAIClientBuilder batchesClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            batchesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            batchesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        batchesClient = batchesClientbuilder.buildBatchesClient();

        OpenAIClientBuilder chatClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            chatClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            chatClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        chatClient = chatClientbuilder.buildChatClient();

        OpenAIClientBuilder completionsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            completionsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            completionsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        completionsClient = completionsClientbuilder.buildCompletionsClient();

        OpenAIClientBuilder embeddingsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            embeddingsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            embeddingsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        embeddingsClient = embeddingsClientbuilder.buildEmbeddingsClient();

        OpenAIClientBuilder filesClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            filesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            filesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        filesClient = filesClientbuilder.buildFilesClient();

        OpenAIClientBuilder fineTuningClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            fineTuningClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            fineTuningClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        fineTuningClient = fineTuningClientbuilder.buildFineTuningClient();

        OpenAIClientBuilder imagesClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            imagesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            imagesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        imagesClient = imagesClientbuilder.buildImagesClient();

        OpenAIClientBuilder messagesClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            messagesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            messagesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        messagesClient = messagesClientbuilder.buildMessagesClient();

        OpenAIClientBuilder modelsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            modelsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            modelsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelsClient = modelsClientbuilder.buildModelsClient();

        OpenAIClientBuilder moderationsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            moderationsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            moderationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        moderationsClient = moderationsClientbuilder.buildModerationsClient();

        OpenAIClientBuilder realtimeClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            realtimeClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            realtimeClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        realtimeClient = realtimeClientbuilder.buildRealtimeClient();

        OpenAIClientBuilder threadsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            threadsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            threadsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        threadsClient = threadsClientbuilder.buildThreadsClient();

        OpenAIClientBuilder runsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            runsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            runsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        runsClient = runsClientbuilder.buildRunsClient();

        OpenAIClientBuilder vectorStoresClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            vectorStoresClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            vectorStoresClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        vectorStoresClient = vectorStoresClientbuilder.buildVectorStoresClient();

        OpenAIClientBuilder uploadsClientbuilder = new OpenAIClientBuilder().httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            uploadsClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            uploadsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        uploadsClient = uploadsClientbuilder.buildUploadsClient();

    }
}
